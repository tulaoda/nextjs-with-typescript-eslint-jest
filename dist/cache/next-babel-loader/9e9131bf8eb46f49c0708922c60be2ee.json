{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/songxinxin/workspace/demo/nextjs-with-typescript-eslint-jest/src/lib/with-redux-store.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { initializeStore } from '../redux/store'; //引入初始化的store\n\nvar isServer = false; //判断一下window在不在\n\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; //定一个常量用来对象存储的key名\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    //当window不存在的时候 直接返回初始化的整个store 就是在服务器的时候\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    //这个索引的对象不存在 客户端的时候，注入一个属性\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState); //就初始化整个store给它\n  }\n\n  return window[__NEXT_REDUX_STORE__]; //最终返回这个对象的key为__NEXT_REDUX_STORE__的值，也就是初始化的整个store\n}\n\nexport default (function (App) {\n  var _temp;\n\n  //App为传入的组件\n  return _temp = /*#__PURE__*/function (_React$PureComponent) {\n    _inherits(AppWithRedux, _React$PureComponent);\n\n    var _super = _createSuper(AppWithRedux);\n\n    _createClass(AppWithRedux, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n          var reduxStore, appProps;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // Get or Create the store with `undefined` as initialState\n                  // This allows you to set a custom default initialState\n                  reduxStore = getOrCreateStore(); //获取初始化的整个store\n                  // Provide the store to getInitialProps of pages\n\n                  appContext.ctx.reduxStore = reduxStore; //然后赋值给整个上下文\n\n                  appProps = {};\n\n                  if (!(typeof App.getInitialProps === 'function')) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return App.getInitialProps(appContext);\n\n                case 6:\n                  appProps = _context.sent;\n\n                case 7:\n                  return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, appProps), {}, {\n                    initialReduxState: reduxStore.getState() //获取初始化的state值\n\n                  }));\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function AppWithRedux(props) {\n      var _this;\n\n      _classCallCheck(this, AppWithRedux);\n\n      _this = _super.call(this, props); // console.log(props);\n\n      _defineProperty(_assertThisInitialized(_this), \"reduxStore\", void 0);\n\n      _this.reduxStore = getOrCreateStore(props.initialReduxState); //获取整个store\n\n      return _this;\n    }\n\n    _createClass(AppWithRedux, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          reduxStore: this.reduxStore,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 20\n          }\n        }));\n      }\n    }]);\n\n    return AppWithRedux;\n  }(React.PureComponent), _temp;\n});","map":{"version":3,"sources":["/Users/songxinxin/workspace/demo/nextjs-with-typescript-eslint-jest/src/lib/with-redux-store.tsx"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","App","appContext","reduxStore","ctx","appProps","getInitialProps","initialReduxState","getState","props","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gBAAhC,C,CAAiD;;AAEjD,IAAMC,QAAiB,QAAvB,C,CAAwD;;AACxD,IAAMC,oBAAoB,GAAG,sBAA7B,C,CAAoD;;AAEpD,SAASC,gBAAT,CAA0BC,YAA1B,EAAmD;AAC/C;AACA,MAAIH,QAAJ,EAAc;AACV;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACH,GAL8C,CAO/C;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AAC/B;AACAG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C,CAF+B,CAE8B;AAChE;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb,CAZ+C,CAYX;AACvC;;AAED,gBAAe,UAACI,GAAD,EAAS;AAAA;;AACpB;AACA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,yGACwCC,UADxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;AACA;AACMC,kBAAAA,UAJd,GAIgCL,gBAAgB,EAJhD,EAImD;AAE3C;;AACAI,kBAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B,CAPR,CAO+C;;AAEnCE,kBAAAA,QATZ,GASuB,EATvB;;AAAA,wBAUY,OAAOJ,GAAG,CAACK,eAAX,KAA+B,UAV3C;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAW6BL,GAAG,CAACK,eAAJ,CAAoBJ,UAApB,CAX7B;;AAAA;AAWYG,kBAAAA,QAXZ;;AAAA;AAAA,mFAgBeA,QAhBf;AAiBYE,oBAAAA,iBAAiB,EAAEJ,UAAU,CAACK,QAAX,EAjB/B,CAiBsD;;AAjBtD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqBI,0BAAmBC,KAAnB,EAA0B;AAAA;;AAAA;;AACtB,gCAAMA,KAAN,EADsB,CAEtB;;AAFsB;;AAGtB,YAAKN,UAAL,GAAkBL,gBAAgB,CAACW,KAAK,CAACF,iBAAP,CAAlC,CAHsB,CAGsC;;AAHtC;AAIzB;;AAzBL;AAAA;AAAA,+BA2BoB;AACZ,eAAO,MAAC,GAAD,eAAS,KAAKE,KAAd;AAAqB,UAAA,UAAU,EAAE,KAAKN,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACH;AA7BL;;AAAA;AAAA,IAAkCT,KAAK,CAACgB,aAAxC;AA+BH,CAjCD","sourcesContent":["import React from 'react'\nimport { initializeStore } from '../redux/store' //引入初始化的store\n\nconst isServer: boolean = typeof window === 'undefined' //判断一下window在不在\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__' //定一个常量用来对象存储的key名\n\nfunction getOrCreateStore(initialState?: any): any {\n    // Always make a new store if server, otherwise state is shared between requests\n    if (isServer) {\n        //当window不存在的时候 直接返回初始化的整个store 就是在服务器的时候\n        return initializeStore(initialState)\n    }\n\n    // Create store if unavailable on the client and set it on the window object\n    if (!window[__NEXT_REDUX_STORE__]) {\n        //这个索引的对象不存在 客户端的时候，注入一个属性\n        window[__NEXT_REDUX_STORE__] = initializeStore(initialState) //就初始化整个store给它\n    }\n    return window[__NEXT_REDUX_STORE__] //最终返回这个对象的key为__NEXT_REDUX_STORE__的值，也就是初始化的整个store\n}\n\nexport default (App) => {\n    //App为传入的组件\n    return class AppWithRedux extends React.PureComponent<{}, {}> {\n        public static async getInitialProps(appContext) {\n            // Get or Create the store with `undefined` as initialState\n            // This allows you to set a custom default initialState\n            const reduxStore: any = getOrCreateStore() //获取初始化的整个store\n\n            // Provide the store to getInitialProps of pages\n            appContext.ctx.reduxStore = reduxStore //然后赋值给整个上下文\n\n            let appProps = {}\n            if (typeof App.getInitialProps === 'function') {\n                appProps = await App.getInitialProps(appContext)\n                // console.log(appProps);\n            }\n\n            return {\n                ...appProps,\n                initialReduxState: reduxStore.getState(), //获取初始化的state值\n            }\n        }\n        private reduxStore: any\n        public constructor(props) {\n            super(props)\n            // console.log(props);\n            this.reduxStore = getOrCreateStore(props.initialReduxState) //获取整个store\n        }\n\n        public render() {\n            return <App {...this.props} reduxStore={this.reduxStore} />\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}