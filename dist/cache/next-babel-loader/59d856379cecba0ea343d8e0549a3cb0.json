{"ast":null,"code":"var _jsxFileName = \"/Users/songxinxin/workspace/demo/nextjs-with-typescript-eslint-jest/src/lib/with-redux-store.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { initializeStore } from '../redux/store'; //引入初始化的store\n\nconst isServer = true; //判断一下window在不在\n\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'; //定一个常量用来对象存储的key名\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    //当window不存在的时候 直接返回初始化的整个store 就是在服务器的时候\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    //这个索引的对象不存在 客户端的时候，注入一个属性\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState); //就初始化整个store给它\n  }\n\n  return window[__NEXT_REDUX_STORE__]; //最终返回这个对象的key为__NEXT_REDUX_STORE__的值，也就是初始化的整个store\n}\n\nexport default (App => {\n  var _temp;\n\n  //App为传入的组件\n  return _temp = class AppWithRedux extends React.PureComponent {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore(); //获取初始化的整个store\n      // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = reduxStore; //然后赋值给整个上下文\n\n      let appProps = {};\n\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps(appContext); // console.log(appProps);\n      }\n\n      return _objectSpread(_objectSpread({}, appProps), {}, {\n        initialReduxState: reduxStore.getState() //获取初始化的state值\n\n      });\n    }\n\n    constructor(props) {\n      super(props); // console.log(props);\n\n      _defineProperty(this, \"reduxStore\", void 0);\n\n      this.reduxStore = getOrCreateStore(props.initialReduxState); //获取整个store\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        reduxStore: this.reduxStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }\n      }));\n    }\n\n  }, _temp;\n});","map":{"version":3,"sources":["/Users/songxinxin/workspace/demo/nextjs-with-typescript-eslint-jest/src/lib/with-redux-store.tsx"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","App","AppWithRedux","PureComponent","getInitialProps","appContext","reduxStore","ctx","appProps","initialReduxState","getState","constructor","props","render"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gBAAhC,C,CAAiD;;AAEjD,MAAMC,QAAiB,OAAvB,C,CAAwD;;AACxD,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAAoD;;AAEpD,SAASC,gBAAT,CAA0BC,YAA1B,EAAmD;AAC/C;AACA,MAAIH,QAAJ,EAAc;AACV;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACH,GAL8C,CAO/C;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AAC/B;AACAG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C,CAF+B,CAE8B;AAChE;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb,CAZ+C,CAYX;AACvC;;AAED,gBAAgBI,GAAD,IAAS;AAAA;;AACpB;AACA,iBAAO,MAAMC,YAAN,SAA2BR,KAAK,CAACS,aAAjC,CAAuD;AAC1D,iBAAoBC,eAApB,CAAoCC,UAApC,EAAgD;AAC5C;AACA;AACA,YAAMC,UAAe,GAAGR,gBAAgB,EAAxC,CAH4C,CAGD;AAE3C;;AACAO,MAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B,CAN4C,CAML;;AAEvC,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAI,OAAOP,GAAG,CAACG,eAAX,KAA+B,UAAnC,EAA+C;AAC3CI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,UAApB,CAAjB,CAD2C,CAE3C;AACH;;AAED,6CACOG,QADP;AAEIC,QAAAA,iBAAiB,EAAEH,UAAU,CAACI,QAAX,EAFvB,CAE8C;;AAF9C;AAIH;;AAEMC,IAAAA,WAAP,CAAmBC,KAAnB,EAA0B;AACtB,YAAMA,KAAN,EADsB,CAEtB;;AAFsB;;AAGtB,WAAKN,UAAL,GAAkBR,gBAAgB,CAACc,KAAK,CAACH,iBAAP,CAAlC,CAHsB,CAGsC;AAC/D;;AAEMI,IAAAA,MAAP,GAAgB;AACZ,aAAO,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,UAAU,EAAE,KAAKN,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AA7ByD,GAA9D;AA+BH,CAjCD","sourcesContent":["import React from 'react'\nimport { initializeStore } from '../redux/store' //引入初始化的store\n\nconst isServer: boolean = typeof window === 'undefined' //判断一下window在不在\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__' //定一个常量用来对象存储的key名\n\nfunction getOrCreateStore(initialState?: any): any {\n    // Always make a new store if server, otherwise state is shared between requests\n    if (isServer) {\n        //当window不存在的时候 直接返回初始化的整个store 就是在服务器的时候\n        return initializeStore(initialState)\n    }\n\n    // Create store if unavailable on the client and set it on the window object\n    if (!window[__NEXT_REDUX_STORE__]) {\n        //这个索引的对象不存在 客户端的时候，注入一个属性\n        window[__NEXT_REDUX_STORE__] = initializeStore(initialState) //就初始化整个store给它\n    }\n    return window[__NEXT_REDUX_STORE__] //最终返回这个对象的key为__NEXT_REDUX_STORE__的值，也就是初始化的整个store\n}\n\nexport default (App) => {\n    //App为传入的组件\n    return class AppWithRedux extends React.PureComponent<{}, {}> {\n        public static async getInitialProps(appContext) {\n            // Get or Create the store with `undefined` as initialState\n            // This allows you to set a custom default initialState\n            const reduxStore: any = getOrCreateStore() //获取初始化的整个store\n\n            // Provide the store to getInitialProps of pages\n            appContext.ctx.reduxStore = reduxStore //然后赋值给整个上下文\n\n            let appProps = {}\n            if (typeof App.getInitialProps === 'function') {\n                appProps = await App.getInitialProps(appContext)\n                // console.log(appProps);\n            }\n\n            return {\n                ...appProps,\n                initialReduxState: reduxStore.getState(), //获取初始化的state值\n            }\n        }\n        private reduxStore: any\n        public constructor(props) {\n            super(props)\n            // console.log(props);\n            this.reduxStore = getOrCreateStore(props.initialReduxState) //获取整个store\n        }\n\n        public render() {\n            return <App {...this.props} reduxStore={this.reduxStore} />\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}